variables:
    TAG: $CI_COMMIT_TAG
    SEARCH_MAX_DEPTH: 10
stages:          
    - sast
    - build
    - deploy
    - dast

include:
  - template: Jobs/SAST.gitlab-ci.yml

semgrep-sast:
  rules:
      - if: $CI_COMMIT_TAG =~ /^alpha/i
      - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

nodejs-scan-sast:
  rules:
      - if: $CI_COMMIT_TAG =~ /^alpha/i
      - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
sast:
  tags:
      - docker
  stage: sast
# sonarqube-test:
#     tags:
#         - shared
#     rules:
#         - if: $CI_COMMIT_TAG =~ /^alpha/i
#     stage: sast 
#     before_script:
#         - export VER=$(echo $CI_COMMIT_TAG | grep -P '^[^-]*' -o)
#         - if [ $VER == "alpha" ]; then export BRANCH=dev; fi
#         - if [ $VER == "live" ]; then export BRANCH=main; fi 
#     script:
#         - /opt/sonar-scanner/bin/sonar-scanner -Dsonar.host.url=http://10.8.60.44:9000/ -Dsonar.branch.name=$BRANCH -Dsonar.projectName=Mongection-TSEL -Dsonar.projectKey=mongection-tsel -Dsonar.token=$SONAR_TOKEN -Dsonar.sources=src/ -Dsonar.qualitygate.wait=true
#     allow_failure: false
    
# build-image-and-push-to-dockerhub:
#     tags:
#         - shared
#     stage: build
#     only:
#         - tags
#     script:
#         - podman build . -t docker.io/prospica/mongection:$TAG -f deployments/mongection.Dockerfile
#         - podman build . -t docker.io/prospica/monggo-db:$TAG -f deployments/mongo.Dockerfile
#         - podman login --username=${DOCKER_USR} --password=${DOCKER_PSW} docker.io
#         - podman push docker.io/prospica/mongection:$TAG
#         - podman push docker.io/prospica/monggo-db:$TAG

# deploy-to-ocp:
#     tags:
#         - shared
#     stage: deploy
#     only:
#         - tags
#     before_script:
#         - export VER=$(echo $CI_COMMIT_TAG | grep -P '^[^-]*' -o)
#     script:
#         - sed -i "s/alpha-.*/$TAG'/" deployment-app.yaml
#         - sed -i "s/alpha-.*/$TAG'/" deployment-db.yaml
#         - sed -i "s/$VER-.*/$TAG'/" deployment-app.yaml
#         - sed -i "s/$VER-.*/$TAG'/" deployment-db.yaml
#         - oc login --token ${OCP_TOKEN} --server=https://api.dev.awankinton.my.id:6443 --insecure-skip-tls-verify
#         - oc apply -f deployment-app.yaml
#         - oc apply -f deployment-db.yaml

# dast-i3gis-run:
#     tags:
#         - shared
#     stage: dast
#     only:
#         - tags
#     script:
#         - echo "Scanning context 13 Context mongection FULL in site mongection with i3gis..."
#         - 'scanResponse=$(curl --write-out ''%{http_code}'' --request POST -sL --url ''https://api.i3gis.id/dast-svc/scan'' --header ''Content-Type: application/json'' --header ''Authorization: Bearer xqdiIzwZ7iVfWQ9s6ngGt7LdAaFOI73R9DOYFGVNdnJMx/HMUjeKCTtE10oRFh78XOvXQZ4Fp7JKulTNKXm+9BGqVSAqWzzUb/8ZlI6s/gew40EB+kXgty9H85XNdhTpvW0CQcYhQgS349XraKRPYg=='' --data ''{"context_id":106}'')'
#         - scanCode=$(echo $scanResponse | grep -o ...$)
#         - 'echo "HTTP response status code: $scanCode"'
#         - if [ $scanCode = "201" ]; then
#         - echo "Scan context 13 Context mongection FULL in site mongection with i3gis..."
#         - else
#         - 'echo "Response: $scanResponse"'
#         - echo "Build failed because scan not success..."
#         - exit 1
#         - fi
#         - echo "Scan context 13 Context mongection FULL in site mongection with i3gis is starting..."

# dast-i3gis-status:
#     tags:
#         - shared
#     stage: dast
#     only:
#         - tags
#     script:
#         - echo "Get scan status..."
#         - status_running=true
#         - while [ "$status_running" = true ]; do
#         - sleep 5
#         - echo "Scan still running..."
#         - 'checkResponse=$(curl --write-out ''%{http_code}'' --request GET -sL --url ''https://api.i3gis.id/dast-svc/context-integration/106'' --header ''Content-Type: application/json'' --header ''Authorization: Bearer xqdiIzwZ7iVfWQ9s6ngGt7LdAaFOI73R9DOYFGVNdnJMx/HMUjeKCTtE10oRFh78XOvXQZ4Fp7JKulTNKXm+9BGqVSAqWzzUb/8ZlI6s/gew40EB+kXgty9H85XNdhTpvW0CQcYhQgS349XraKRPYg=='')'
#         - checkCode=$(echo $checkResponse | grep -o ...$)
#         - 'echo "HTTP response status code: $checkCode"'
#         - if [ $checkCode != "200" ] && [ $checkCode != "404" ]; then
#         - 'echo "Response: $checkResponse"'
#         - echo "Scan failed..."
#         - exit 1
#         - fi
#         - if [ $checkCode = "404" ]; then
#         - echo "Scan finished..."
#         - status_running=false
#         - fi
#         - done
